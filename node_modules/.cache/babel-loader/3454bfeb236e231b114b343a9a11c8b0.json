{"ast":null,"code":"var _jsxFileName = \"/Users/in2/Documents/GitHub/use-mapbox-gl-js-with-react/src/App.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = 'pk.eyJ1IjoiaW4ydHdhbiIsImEiOiJja3l6bjJ0ZWIwY2d0Mm5yemZ3NWFmOWhjIn0._B39LsH99PmOk74938_tUg'; //import {Tile3DLayer} from '@deck.gl/geo-layers';\n//import {Tiles3DLoader} from '@loaders.gl/3d-tiles';\n//const tileChiyoda = 'https://s3-ap-northeast-1.amazonaws.com/3dimension.jp/13000_tokyo-egm96/13101_chiyoda-ku_notexture/tileset.json';\n\nexport default function App() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [lat, setLat] = useState(35.68836671417561);\n  const [lng, setLng] = useState(139.75643914212702);\n  const [zoom, setZoom] = useState(14);\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/in2twan/ckyzn794b000t14s81978v83n',\n      center: [lng, lat],\n      zoom: zoom\n    });\n  });\n  componentDidMount(_s(() => {\n    _s();\n\n    useEffect(() => {\n      if (!map.current) return; // wait for map to initialize\n\n      map.current.on('move', () => {\n        setLng(map.current.getCenter().lng.toFixed(4));\n        setLat(map.current.getCenter().lat.toFixed(4));\n        setZoom(map.current.getZoom().toFixed(2));\n      });\n    });\n  }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainer,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"umxR8Y4q9bhtYDjR7K81b9YZVBE=\");\n\n_c = App;\n;\n/*\n// DeckGL and mapbox will both draw into this WebGL context\nconst deckRef = useRef(null);\nconst mapRef = useRef(null);\n const onMapLoad = useCallback(() => {\nconst map = mapRef.current.getMap();\nconst deck = deckRef.current.deck;\n   \n  // You must initialize an empty deck.gl layer to prevent flashing\n  map.addLayer(\n    // This id has to match the id of the deck.gl layer\n    new MapboxLayer({ id: \"tile-3d-layer\", deck }),\n    // Optionally define id from Mapbox layer stack under which to add deck layer\n    // 'before-layer-id'\n  );\n   const layers = [\n    new Tile3DLayer({\n      id: 'tile-3d-layer',\n      pointSize: 2,\n      data: tileChiyoda,\n      loader: Tiles3DLoader,\n      onTilesetLoad: (tileset) => {\n        const {cartographicCenter} = tileset;\n        const [longitude, latitude] = cartographicCenter;\n        console.log(longitude, latitude);\n      },\n      onTileLoad: (tileHeader) => {\n        tileHeader.content.cartographicOrigin.z -= 40;\n      }\n    })\n  ]\n  */\n\n/*\nexport default function App({\n  mapStyle = 'https://basemaps.cartocdn.com/gl/dark-matter-nolabels-gl-style/style.json',\n  updateAttributions\n}) {\n  const [initialViewState, setInitialViewState] = useState(INITIAL_VIEW_STATE);\n\n  const onTilesetLoad = tileset => {\n    // Recenter view to cover the new tileset\n    const {cartographicCenter, zoom} = tileset;\n    setInitialViewState({\n      ...INITIAL_VIEW_STATE,\n      longitude: cartographicCenter[0],\n      latitude: cartographicCenter[1],\n      zoom\n    });\n\n    if (updateAttributions) {\n      updateAttributions(tileset.credits && tileset.credits.attributions);\n    }\n  };\n  \n  return (\n    <DeckGL layers={[chiyoda], [minato]} initialViewState={initialViewState} controller={true} effects={[lightingEffect]}>\n      <StaticMap reuseMaps mapStyle={mapStyle} preventStyleDiffing />\n    </DeckGL>\n  );\n}*/\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/in2/Documents/GitHub/use-mapbox-gl-js-with-react/src/App.js"],"names":["React","useRef","useEffect","useState","mapboxgl","accessToken","App","mapContainer","map","lat","setLat","lng","setLng","zoom","setZoom","current","Map","container","style","center","componentDidMount","on","getCenter","toFixed","getZoom"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,QAAP,MAAqB,WAArB;;AACAA,QAAQ,CAACC,WAAT,GAAuB,2FAAvB,C,CACA;AACA;AAEA;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAAA;;AAC5B,QAAMC,YAAY,GAAGN,MAAM,CAAC,IAAD,CAA3B;AACA,QAAMO,GAAG,GAAGP,MAAM,CAAC,IAAD,CAAlB;AACA,QAAM,CAACQ,GAAD,EAAMC,MAAN,IAAgBP,QAAQ,CAAC,iBAAD,CAA9B;AACA,QAAM,CAACQ,GAAD,EAAMC,MAAN,IAAgBT,QAAQ,CAAC,kBAAD,CAA9B;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,GAAG,CAACO,OAAR,EAAiB,OADH,CACW;;AACzBP,IAAAA,GAAG,CAACO,OAAJ,GAAc,IAAIX,QAAQ,CAACY,GAAb,CAAiB;AAC/BC,MAAAA,SAAS,EAAEV,YAAY,CAACQ,OADO;AAE/BG,MAAAA,KAAK,EAAE,mDAFwB;AAG/BC,MAAAA,MAAM,EAAE,CAACR,GAAD,EAAMF,GAAN,CAHuB;AAI/BI,MAAAA,IAAI,EAAEA;AAJyB,KAAjB,CAAd;AAMD,GARQ,CAAT;AAUAO,EAAAA,iBAAiB,IAAC,MAAM;AAAA;;AACtBlB,IAAAA,SAAS,CAAC,MAAM;AACd,UAAI,CAACM,GAAG,CAACO,OAAT,EAAkB,OADJ,CACY;;AAC1BP,MAAAA,GAAG,CAACO,OAAJ,CAAYM,EAAZ,CAAe,MAAf,EAAuB,MAAM;AAC7BT,QAAAA,MAAM,CAACJ,GAAG,CAACO,OAAJ,CAAYO,SAAZ,GAAwBX,GAAxB,CAA4BY,OAA5B,CAAoC,CAApC,CAAD,CAAN;AACAb,QAAAA,MAAM,CAACF,GAAG,CAACO,OAAJ,CAAYO,SAAZ,GAAwBb,GAAxB,CAA4Bc,OAA5B,CAAoC,CAApC,CAAD,CAAN;AACAT,QAAAA,OAAO,CAACN,GAAG,CAACO,OAAJ,CAAYS,OAAZ,GAAsBD,OAAtB,CAA8B,CAA9B,CAAD,CAAP;AACC,OAJD;AAKD,KAPQ,CAAT;AAQD,GATgB,kCAAjB;AAWA,sBACE;AAAA,2BACE;AAAK,MAAA,GAAG,EAAEhB,YAAV;AAAwB,MAAA,SAAS,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IAjCuBD,G;;KAAAA,G;AAiCvB;AAEC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nmapboxgl.accessToken = 'pk.eyJ1IjoiaW4ydHdhbiIsImEiOiJja3l6bjJ0ZWIwY2d0Mm5yemZ3NWFmOWhjIn0._B39LsH99PmOk74938_tUg'\n//import {Tile3DLayer} from '@deck.gl/geo-layers';\n//import {Tiles3DLoader} from '@loaders.gl/3d-tiles';\n\n//const tileChiyoda = 'https://s3-ap-northeast-1.amazonaws.com/3dimension.jp/13000_tokyo-egm96/13101_chiyoda-ku_notexture/tileset.json';\n\nexport default function App() {\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [lat, setLat] = useState(35.68836671417561);\n  const [lng, setLng] = useState(139.75643914212702);\n  const [zoom, setZoom] = useState(14);\n\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n    map.current = new mapboxgl.Map({\n    container: mapContainer.current,\n    style: 'mapbox://styles/in2twan/ckyzn794b000t14s81978v83n',\n    center: [lng, lat],\n    zoom: zoom\n    });\n  });\n\n  componentDidMount(() => {\n    useEffect(() => {\n      if (!map.current) return; // wait for map to initialize\n      map.current.on('move', () => {\n      setLng(map.current.getCenter().lng.toFixed(4));\n      setLat(map.current.getCenter().lat.toFixed(4));\n      setZoom(map.current.getZoom().toFixed(2));\n      });\n    });\n  });\n\n  return (\n    <div>\n      <div ref={mapContainer} className=\"map-container\" />\n    </div>\n  );\n};\n\n  /*\n  // DeckGL and mapbox will both draw into this WebGL context\n  const deckRef = useRef(null);\n  const mapRef = useRef(null);\n\n  const onMapLoad = useCallback(() => {\n  const map = mapRef.current.getMap();\n  const deck = deckRef.current.deck;\n\n    \n    // You must initialize an empty deck.gl layer to prevent flashing\n    map.addLayer(\n      // This id has to match the id of the deck.gl layer\n      new MapboxLayer({ id: \"tile-3d-layer\", deck }),\n      // Optionally define id from Mapbox layer stack under which to add deck layer\n      // 'before-layer-id'\n    );\n\n    const layers = [\n      new Tile3DLayer({\n        id: 'tile-3d-layer',\n        pointSize: 2,\n        data: tileChiyoda,\n        loader: Tiles3DLoader,\n        onTilesetLoad: (tileset) => {\n          const {cartographicCenter} = tileset;\n          const [longitude, latitude] = cartographicCenter;\n          console.log(longitude, latitude);\n        },\n        onTileLoad: (tileHeader) => {\n          tileHeader.content.cartographicOrigin.z -= 40;\n        }\n      })\n    ]\n    */\n\n/*\nexport default function App({\n  mapStyle = 'https://basemaps.cartocdn.com/gl/dark-matter-nolabels-gl-style/style.json',\n  updateAttributions\n}) {\n  const [initialViewState, setInitialViewState] = useState(INITIAL_VIEW_STATE);\n\n  const onTilesetLoad = tileset => {\n    // Recenter view to cover the new tileset\n    const {cartographicCenter, zoom} = tileset;\n    setInitialViewState({\n      ...INITIAL_VIEW_STATE,\n      longitude: cartographicCenter[0],\n      latitude: cartographicCenter[1],\n      zoom\n    });\n\n    if (updateAttributions) {\n      updateAttributions(tileset.credits && tileset.credits.attributions);\n    }\n  };\n  \n  return (\n    <DeckGL layers={[chiyoda], [minato]} initialViewState={initialViewState} controller={true} effects={[lightingEffect]}>\n      <StaticMap reuseMaps mapStyle={mapStyle} preventStyleDiffing />\n    </DeckGL>\n  );\n}*/"]},"metadata":{},"sourceType":"module"}