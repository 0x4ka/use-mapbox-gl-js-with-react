{"ast":null,"code":"var _jsxFileName = \"/Users/in2/Documents/GitHub/use-mapbox-gl-js-with-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport { DeckGL } from 'deck.gl';\nimport { MapboxLayer } from '@deck.gl/mapbox';\nimport { Tile3DLayer } from '@deck.gl/geo-layers';\nimport { Tiles3DLoader } from '@loaders.gl/3d-tiles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = 'pk.eyJ1IjoiaW4ydHdhbiIsImEiOiJja3l6bjJ0ZWIwY2d0Mm5yemZ3NWFmOWhjIn0._B39LsH99PmOk74938_tUg';\nconst tileChiyoda = 'https://s3-ap-northeast-1.amazonaws.com/3dimension.jp/13000_tokyo-egm96/13101_chiyoda-ku_notexture/tileset.json';\nexport default function App() {\n  _s();\n\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [lat, setLat] = useState(35.68836671417561);\n  const [lng, setLng] = useState(139.75643914212702);\n  const [zoom, setZoom] = useState(14);\n  const tile3dLayer = new MapboxLayer({\n    id: 'tile3dlayer',\n    type: Tile3DLayer,\n    pointSize: 1,\n    data: tileChiyoda,\n    opacity: 0.9,\n    pickable: true,\n    loader: Tiles3DLoader,\n    onTileLoad: tileHeader => {\n      tileHeader.content.cartographicOrigin.z -= 40;\n    }\n  });\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/in2twan/ckyzn794b000t14s81978v83n',\n      center: [lng, lat],\n      zoom: zoom\n    });\n  });\n  useEffect(() => {\n    if (!map.current) return; // wait for map to initialize\n\n    map.current.on('move', () => {\n      setLng(map.current.getCenter().lng.toFixed(4));\n      setLat(map.current.getCenter().lat.toFixed(4));\n      setZoom(map.current.getZoom().toFixed(2));\n    });\n  });\n  useEffect(() => {\n    map.current.on('load', () => {\n      map.current.addLayer(tile3dLayer);\n    });\n  });\n  const onClick = useCallback(event => {\n    const pickInfo = deckRef.current.pickObject({\n      x: event.clientX,\n      y: event.clientY,\n      radius: 1\n    });\n    console.log(pickInfo.coordinate);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [\"Longitude: \", lng, \" | Latitude: \", lat, \" | Zoom: \", zoom]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainer,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: onClick,\n      children: /*#__PURE__*/_jsxDEV(DeckGL, {\n        initialViewState: {\n          longitude: -122.45,\n          latitude: 27.78,\n          zoom: 12\n        },\n        controller: true,\n        layers: layers,\n        children: hoverInfo.object && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            zIndex: 1,\n            pointerEvents: 'none',\n            left: hoverInfo.x,\n            top: hoverInfo.y\n          },\n          children: hoverInfo.object.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"CQx7zjjaV0m7we008wdhYRzjygY=\");\n\n_c = App;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/in2/Documents/GitHub/use-mapbox-gl-js-with-react/src/App.js"],"names":["React","useRef","useEffect","useState","mapboxgl","DeckGL","MapboxLayer","Tile3DLayer","Tiles3DLoader","accessToken","tileChiyoda","App","mapContainer","map","lat","setLat","lng","setLng","zoom","setZoom","tile3dLayer","id","type","pointSize","data","opacity","pickable","loader","onTileLoad","tileHeader","content","cartographicOrigin","z","current","Map","container","style","center","on","getCenter","toFixed","getZoom","addLayer","onClick","useCallback","event","pickInfo","deckRef","pickObject","x","clientX","y","clientY","radius","console","log","coordinate","longitude","latitude","layers","hoverInfo","object","position","zIndex","pointerEvents","left","top","message"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport { DeckGL } from 'deck.gl';\nimport {MapboxLayer} from '@deck.gl/mapbox'\nimport {Tile3DLayer} from '@deck.gl/geo-layers';\nimport {Tiles3DLoader} from '@loaders.gl/3d-tiles';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiaW4ydHdhbiIsImEiOiJja3l6bjJ0ZWIwY2d0Mm5yemZ3NWFmOWhjIn0._B39LsH99PmOk74938_tUg'\nconst tileChiyoda = 'https://s3-ap-northeast-1.amazonaws.com/3dimension.jp/13000_tokyo-egm96/13101_chiyoda-ku_notexture/tileset.json';\n\nexport default function App() {\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [lat, setLat] = useState(35.68836671417561);\n  const [lng, setLng] = useState(139.75643914212702);\n  const [zoom, setZoom] = useState(14);\n\n  const tile3dLayer = new MapboxLayer({\n    id: 'tile3dlayer',\n    type: Tile3DLayer,\n    pointSize: 1,\n    data: tileChiyoda,\n    opacity: 0.9,\n    pickable: true,\n    loader: Tiles3DLoader,\n    onTileLoad: (tileHeader) => {\n      tileHeader.content.cartographicOrigin.z -= 40\n    }\n  });\n\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n    map.current = new mapboxgl.Map({\n    container: mapContainer.current,\n    style: 'mapbox://styles/in2twan/ckyzn794b000t14s81978v83n',\n    center: [lng, lat],\n    zoom: zoom\n    });\n  });\n\n  useEffect(() => {\n    if (!map.current) return; // wait for map to initialize\n    map.current.on('move', () => {\n      setLng(map.current.getCenter().lng.toFixed(4));\n      setLat(map.current.getCenter().lat.toFixed(4));\n      setZoom(map.current.getZoom().toFixed(2));\n    });\n  });\n\n  useEffect(() => {\n    map.current.on('load', () => {\n      map.current.addLayer(tile3dLayer);\n    });\n    \n  });\n\n  const onClick = useCallback(event => {\n    const pickInfo = deckRef.current.pickObject({\n      x: event.clientX,\n      y: event.clientY,\n      radius: 1\n    });\n    console.log(pickInfo.coordinate);\n  }, [])\n\n  return (\n    <div>\n      <div className=\"sidebar\">\n        Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\n      </div>\n      <div \n      ref={mapContainer}\n      className=\"map-container\"\n      />\n      <div onClick={onClick}>\n        <DeckGL initialViewState={{longitude: -122.45, latitude: 27.78, zoom: 12}}\n            controller={true}\n            layers={layers} >\n          {hoverInfo.object && (\n            <div style={{position: 'absolute', zIndex: 1, pointerEvents: 'none', left: hoverInfo.x, top: hoverInfo.y}}>\n              { hoverInfo.object.message }\n            </div>\n          )}\n        </DeckGL>\n      </div>\n    </div>\n  );\n};"]},"metadata":{},"sourceType":"module"}