{"ast":null,"code":"var _jsxFileName = \"/Users/in2/Documents/GitHub/use-mapbox-gl-js-with-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from '!mapbox-gl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = 'pk.eyJ1IjoiaW4ydHdhbiIsImEiOiJja3l6bjJ0ZWIwY2d0Mm5yemZ3NWFmOWhjIn0._B39LsH99PmOk74938_tUg';\n/*\nimport {render} from 'react-dom';\nimport {StaticMap} from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport {Tile3DLayer} from '@deck.gl/geo-layers';\nimport { Tiles3DLoader } from '@loaders.gl/3d-tiles';\nimport {AmbientLight, PointLight, DirectionalLight, LightingEffect} from '@deck.gl/core';\n\n// create ambient light source\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 0.8\n});\n// create directional light source\nconst directionalLight = new DirectionalLight({\n  color: [255, 255, 255],\n  intensity: 1.0,\n  direction: [-3, -9, -1]\n});\n// create lighting effect with light sources\nconst lightingEffect = new LightingEffect({ambientLight, directionalLight});\n\nconst tileChiyoda = 'https://s3-ap-northeast-1.amazonaws.com/3dimension.jp/13000_tokyo-egm96/13101_chiyoda-ku_notexture/tileset.json';\nconst tileMinato = 'https://s3-ap-northeast-1.amazonaws.com/3dimension.jp/13000_tokyo-egm96/13103_minato-ku_notexture/tileset.json';\n*/\n\n/*\nconst INITIAL_VIEW_STATE = {\n  latitude: 35.68836671417561,\n  longitude: 139.75643914212702,\n  pitch: 45,\n  maxPitch: 60,\n  bearing: 0,\n  minZoom: 2,\n  maxZoom: 30,\n  zoom: 14\n};\n*/\n\nexport default function App() {\n  _s();\n\n  const mapContainer = useRef(null);\n  const map = useRef(null); //const [lng, setLng] = useState(35.68836671417561);\n  //const [lat, setLat] = useState(139.75643914212702);\n\n  const [lat, setLat] = useState(35.68836671417561);\n  const [lng, setLng] = useState(139.75643914212702);\n  const [zoom, setZoom] = useState(14);\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/in2twan/ckyzn794b000t14s81978v83n',\n      center: [lng, lat],\n      zoom: zoom\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainer,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n/*\nexport default function App({\n  mapStyle = 'https://basemaps.cartocdn.com/gl/dark-matter-nolabels-gl-style/style.json',\n  updateAttributions\n}) {\n  const [initialViewState, setInitialViewState] = useState(INITIAL_VIEW_STATE);\n\n  const onTilesetLoad = tileset => {\n    // Recenter view to cover the new tileset\n    const {cartographicCenter, zoom} = tileset;\n    setInitialViewState({\n      ...INITIAL_VIEW_STATE,\n      longitude: cartographicCenter[0],\n      latitude: cartographicCenter[1],\n      zoom\n    });\n\n    if (updateAttributions) {\n      updateAttributions(tileset.credits && tileset.credits.attributions);\n    }\n  };\n\n  const chiyoda = new Tile3DLayer({\n    id: 'tile-3d-layer',\n    pointSize: 2,\n    data: tileChiyoda,\n    loader: Tiles3DLoader,\n    onTilesetLoad: (tileset) => {\n      const { cartographicCenter } = tileset;\n      const [longitude, latitude] = cartographicCenter;\n      console.log(longitude, latitude);\n    },\n    onTileLoad: (tileHeader) => {\n      tileHeader.content.cartographicOrigin.z -= 40;\n    }\n  });\n\n  const minato = new Tile3DLayer({\n    id: 'tile-3d-layer',\n    pointSize: 2,\n    data: tileMinato,\n    loader: Tiles3DLoader,\n    onTilesetLoad: (tileset) => {\n      const { cartographicCenter } = tileset;\n      const [longitude, latitude] = cartographicCenter;\n      console.log(longitude, latitude);\n    },\n    onTileLoad: (tileHeader) => {\n      tileHeader.content.cartographicOrigin.z -= 40;\n    }\n  });\n\n  return (\n    <DeckGL layers={[chiyoda], [minato]} initialViewState={initialViewState} controller={true} effects={[lightingEffect]}>\n      <StaticMap reuseMaps mapStyle={mapStyle} preventStyleDiffing />\n    </DeckGL>\n  );\n}\n\nexport function renderToDOM(container) {\n  render(<App />, container);\n}\n*/\n\n_s(App, \"umxR8Y4q9bhtYDjR7K81b9YZVBE=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/in2/Documents/GitHub/use-mapbox-gl-js-with-react/src/App.js"],"names":["React","useRef","useEffect","useState","mapboxgl","accessToken","App","mapContainer","map","lat","setLat","lng","setLng","zoom","setZoom","current","Map","container","style","center"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,QAAP,MAAqB,YAArB;;AACAA,QAAQ,CAACC,WAAT,GAAuB,2FAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAMC,YAAY,GAAGN,MAAM,CAAC,IAAD,CAA3B;AACA,QAAMO,GAAG,GAAGP,MAAM,CAAC,IAAD,CAAlB,CAF4B,CAG5B;AACA;;AACA,QAAM,CAACQ,GAAD,EAAMC,MAAN,IAAgBP,QAAQ,CAAC,iBAAD,CAA9B;AACA,QAAM,CAACQ,GAAD,EAAMC,MAAN,IAAgBT,QAAQ,CAAC,kBAAD,CAA9B;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,GAAG,CAACO,OAAR,EAAiB,OADH,CACW;;AACzBP,IAAAA,GAAG,CAACO,OAAJ,GAAc,IAAIX,QAAQ,CAACY,GAAb,CAAiB;AAC/BC,MAAAA,SAAS,EAAEV,YAAY,CAACQ,OADO;AAE/BG,MAAAA,KAAK,EAAE,mDAFwB;AAG/BC,MAAAA,MAAM,EAAE,CAACR,GAAD,EAAMF,GAAN,CAHuB;AAI/BI,MAAAA,IAAI,EAAEA;AAJyB,KAAjB,CAAd;AAMD,GARQ,CAAT;AAUA,sBACE;AAAA,2BACE;AAAK,MAAA,GAAG,EAAEN,YAAV;AAAwB,MAAA,SAAS,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAxFwBD,G;;KAAAA,G","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from '!mapbox-gl';\nmapboxgl.accessToken = 'pk.eyJ1IjoiaW4ydHdhbiIsImEiOiJja3l6bjJ0ZWIwY2d0Mm5yemZ3NWFmOWhjIn0._B39LsH99PmOk74938_tUg';\n/*\nimport {render} from 'react-dom';\nimport {StaticMap} from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport {Tile3DLayer} from '@deck.gl/geo-layers';\nimport { Tiles3DLoader } from '@loaders.gl/3d-tiles';\nimport {AmbientLight, PointLight, DirectionalLight, LightingEffect} from '@deck.gl/core';\n\n// create ambient light source\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 0.8\n});\n// create directional light source\nconst directionalLight = new DirectionalLight({\n  color: [255, 255, 255],\n  intensity: 1.0,\n  direction: [-3, -9, -1]\n});\n// create lighting effect with light sources\nconst lightingEffect = new LightingEffect({ambientLight, directionalLight});\n\nconst tileChiyoda = 'https://s3-ap-northeast-1.amazonaws.com/3dimension.jp/13000_tokyo-egm96/13101_chiyoda-ku_notexture/tileset.json';\nconst tileMinato = 'https://s3-ap-northeast-1.amazonaws.com/3dimension.jp/13000_tokyo-egm96/13103_minato-ku_notexture/tileset.json';\n*/\n/*\nconst INITIAL_VIEW_STATE = {\n  latitude: 35.68836671417561,\n  longitude: 139.75643914212702,\n  pitch: 45,\n  maxPitch: 60,\n  bearing: 0,\n  minZoom: 2,\n  maxZoom: 30,\n  zoom: 14\n};\n*/\n\nexport default function App() {\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  //const [lng, setLng] = useState(35.68836671417561);\n  //const [lat, setLat] = useState(139.75643914212702);\n  const [lat, setLat] = useState(35.68836671417561);\n  const [lng, setLng] = useState(139.75643914212702);\n  const [zoom, setZoom] = useState(14);\n\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n    map.current = new mapboxgl.Map({\n    container: mapContainer.current,\n    style: 'mapbox://styles/in2twan/ckyzn794b000t14s81978v83n',\n    center: [lng, lat],\n    zoom: zoom\n    });\n  });\n\n  return (\n    <div>\n      <div ref={mapContainer} className=\"map-container\" />\n    </div>\n  );\n}\n\n/*\nexport default function App({\n  mapStyle = 'https://basemaps.cartocdn.com/gl/dark-matter-nolabels-gl-style/style.json',\n  updateAttributions\n}) {\n  const [initialViewState, setInitialViewState] = useState(INITIAL_VIEW_STATE);\n\n  const onTilesetLoad = tileset => {\n    // Recenter view to cover the new tileset\n    const {cartographicCenter, zoom} = tileset;\n    setInitialViewState({\n      ...INITIAL_VIEW_STATE,\n      longitude: cartographicCenter[0],\n      latitude: cartographicCenter[1],\n      zoom\n    });\n\n    if (updateAttributions) {\n      updateAttributions(tileset.credits && tileset.credits.attributions);\n    }\n  };\n\n  const chiyoda = new Tile3DLayer({\n    id: 'tile-3d-layer',\n    pointSize: 2,\n    data: tileChiyoda,\n    loader: Tiles3DLoader,\n    onTilesetLoad: (tileset) => {\n      const { cartographicCenter } = tileset;\n      const [longitude, latitude] = cartographicCenter;\n      console.log(longitude, latitude);\n    },\n    onTileLoad: (tileHeader) => {\n      tileHeader.content.cartographicOrigin.z -= 40;\n    }\n  });\n\n  const minato = new Tile3DLayer({\n    id: 'tile-3d-layer',\n    pointSize: 2,\n    data: tileMinato,\n    loader: Tiles3DLoader,\n    onTilesetLoad: (tileset) => {\n      const { cartographicCenter } = tileset;\n      const [longitude, latitude] = cartographicCenter;\n      console.log(longitude, latitude);\n    },\n    onTileLoad: (tileHeader) => {\n      tileHeader.content.cartographicOrigin.z -= 40;\n    }\n  });\n\n  return (\n    <DeckGL layers={[chiyoda], [minato]} initialViewState={initialViewState} controller={true} effects={[lightingEffect]}>\n      <StaticMap reuseMaps mapStyle={mapStyle} preventStyleDiffing />\n    </DeckGL>\n  );\n}\n\nexport function renderToDOM(container) {\n  render(<App />, container);\n}\n*/"]},"metadata":{},"sourceType":"module"}