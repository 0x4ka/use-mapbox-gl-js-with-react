{"ast":null,"code":"var _jsxFileName = \"/Users/in2/Documents/GitHub/use-mapbox-gl-js-with-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nmapboxgl.accessToken = 'pk.eyJ1IjoiaW4ydHdhbiIsImEiOiJja3l6bjJ0ZWIwY2d0Mm5yemZ3NWFmOWhjIn0._B39LsH99PmOk74938_tUg';\nimport { Tile3DLayer } from '@deck.gl/geo-layers';\nimport { Tiles3DLoader } from '@loaders.gl/3d-tiles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tileChiyoda = 'https://s3-ap-northeast-1.amazonaws.com/3dimension.jp/13000_tokyo-egm96/13101_chiyoda-ku_notexture/tileset.json';\nexport default function App() {\n  _s();\n\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [lat, setLat] = useState(35.68836671417561);\n  const [lng, setLng] = useState(139.75643914212702);\n  const [zoom, setZoom] = useState(14);\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/in2twan/ckyzn794b000t14s81978v83n',\n      center: [lng, lat],\n      zoom: zoom\n    });\n  }); // DeckGL and mapbox will both draw into this WebGL context\n\n  const deckRef = useRef(null);\n  const mapRef = useRef(null);\n  const onMapLoad = useCallback(() => {\n    const map = mapRef.current.getMap();\n    const deck = deckRef.current.deck;\n    const layers = [new Tile3DLayer({\n      id: 'tile-3d-layer',\n      pointSize: 2,\n      data: tileChiyoda,\n      loader: Tiles3DLoader,\n      onTilesetLoad: tileset => {\n        const {\n          cartographicCenter\n        } = tileset;\n        const [longitude, latitude] = cartographicCenter;\n        console.log(longitude, latitude);\n      },\n      onTileLoad: tileHeader => {\n        tileHeader.content.cartographicOrigin.z -= 40;\n      }\n    })]; // You must initialize an empty deck.gl layer to prevent flashing\n\n    map.addLayer( // This id has to match the id of the deck.gl layer\n    new MapboxLayer({\n      id: \"tile-3d-layer\",\n      deck\n    }) // Optionally define id from Mapbox layer stack under which to add deck layer\n    // 'before-layer-id'\n    );\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainer,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"AKbsPex4TGlag7NTxFMDi5PrwOw=\");\n\n_c = App;\n;\n/*\nexport default function App({\n  mapStyle = 'https://basemaps.cartocdn.com/gl/dark-matter-nolabels-gl-style/style.json',\n  updateAttributions\n}) {\n  const [initialViewState, setInitialViewState] = useState(INITIAL_VIEW_STATE);\n\n  const onTilesetLoad = tileset => {\n    // Recenter view to cover the new tileset\n    const {cartographicCenter, zoom} = tileset;\n    setInitialViewState({\n      ...INITIAL_VIEW_STATE,\n      longitude: cartographicCenter[0],\n      latitude: cartographicCenter[1],\n      zoom\n    });\n\n    if (updateAttributions) {\n      updateAttributions(tileset.credits && tileset.credits.attributions);\n    }\n  };\n  \n  return (\n    <DeckGL layers={[chiyoda], [minato]} initialViewState={initialViewState} controller={true} effects={[lightingEffect]}>\n      <StaticMap reuseMaps mapStyle={mapStyle} preventStyleDiffing />\n    </DeckGL>\n  );\n}*/\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/in2/Documents/GitHub/use-mapbox-gl-js-with-react/src/App.js"],"names":["React","useRef","useEffect","useState","mapboxgl","accessToken","Tile3DLayer","Tiles3DLoader","tileChiyoda","App","mapContainer","map","lat","setLat","lng","setLng","zoom","setZoom","current","Map","container","style","center","deckRef","mapRef","onMapLoad","useCallback","getMap","deck","layers","id","pointSize","data","loader","onTilesetLoad","tileset","cartographicCenter","longitude","latitude","console","log","onTileLoad","tileHeader","content","cartographicOrigin","z","addLayer","MapboxLayer"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nmapboxgl.accessToken = 'pk.eyJ1IjoiaW4ydHdhbiIsImEiOiJja3l6bjJ0ZWIwY2d0Mm5yemZ3NWFmOWhjIn0._B39LsH99PmOk74938_tUg'\nimport {Tile3DLayer} from '@deck.gl/geo-layers';\nimport {Tiles3DLoader} from '@loaders.gl/3d-tiles';\n\nconst tileChiyoda = 'https://s3-ap-northeast-1.amazonaws.com/3dimension.jp/13000_tokyo-egm96/13101_chiyoda-ku_notexture/tileset.json';\n\nexport default function App() {\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [lat, setLat] = useState(35.68836671417561);\n  const [lng, setLng] = useState(139.75643914212702);\n  const [zoom, setZoom] = useState(14);\n\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n    map.current = new mapboxgl.Map({\n    container: mapContainer.current,\n    style: 'mapbox://styles/in2twan/ckyzn794b000t14s81978v83n',\n    center: [lng, lat],\n    zoom: zoom\n    });\n  });\n\n  // DeckGL and mapbox will both draw into this WebGL context\n  const deckRef = useRef(null);\n  const mapRef = useRef(null);\n\n  const onMapLoad = useCallback(() => {\n    const map = mapRef.current.getMap();\n    const deck = deckRef.current.deck;\n\n    const layers = [\n      new Tile3DLayer({\n        id: 'tile-3d-layer',\n        pointSize: 2,\n        data: tileChiyoda,\n        loader: Tiles3DLoader,\n        onTilesetLoad: (tileset) => {\n          const { cartographicCenter } = tileset;\n          const [longitude, latitude] = cartographicCenter;\n          console.log(longitude, latitude);\n        },\n        onTileLoad: (tileHeader) => {\n          tileHeader.content.cartographicOrigin.z -= 40;\n        }\n      })\n    ]\n\n    // You must initialize an empty deck.gl layer to prevent flashing\n    map.addLayer(\n      // This id has to match the id of the deck.gl layer\n      new MapboxLayer({ id: \"tile-3d-layer\", deck }),\n      // Optionally define id from Mapbox layer stack under which to add deck layer\n      // 'before-layer-id'\n    );\n  }, []);\n\n  return (\n    <div>\n      <div ref={mapContainer} className=\"map-container\" />\n    </div>\n  );\n};\n\n/*\nexport default function App({\n  mapStyle = 'https://basemaps.cartocdn.com/gl/dark-matter-nolabels-gl-style/style.json',\n  updateAttributions\n}) {\n  const [initialViewState, setInitialViewState] = useState(INITIAL_VIEW_STATE);\n\n  const onTilesetLoad = tileset => {\n    // Recenter view to cover the new tileset\n    const {cartographicCenter, zoom} = tileset;\n    setInitialViewState({\n      ...INITIAL_VIEW_STATE,\n      longitude: cartographicCenter[0],\n      latitude: cartographicCenter[1],\n      zoom\n    });\n\n    if (updateAttributions) {\n      updateAttributions(tileset.credits && tileset.credits.attributions);\n    }\n  };\n  \n  return (\n    <DeckGL layers={[chiyoda], [minato]} initialViewState={initialViewState} controller={true} effects={[lightingEffect]}>\n      <StaticMap reuseMaps mapStyle={mapStyle} preventStyleDiffing />\n    </DeckGL>\n  );\n}*/"]},"metadata":{},"sourceType":"module"}