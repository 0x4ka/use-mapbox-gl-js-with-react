{"ast":null,"code":"var _jsxFileName = \"/Users/in2/Documents/GitHub/use-mapbox-gl-js-with-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nmapboxgl.accessToken = 'pk.eyJ1IjoiaW4ydHdhbiIsImEiOiJja3l6bjJ0ZWIwY2d0Mm5yemZ3NWFmOWhjIn0._B39LsH99PmOk74938_tUg';\nimport { render } from 'react-dom';\nimport { StaticMap } from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport { Tile3DLayer } from '@deck.gl/geo-layers';\nimport { Tiles3DLoader } from '@loaders.gl/3d-tiles';\nimport { AmbientLight, PointLight, DirectionalLight, LightingEffect } from '@deck.gl/core'; // create ambient light source\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 0.8\n}); // create directional light source\n\nconst directionalLight = new DirectionalLight({\n  color: [255, 255, 255],\n  intensity: 1.0,\n  direction: [-3, -9, -1]\n}); // create lighting effect with light sources\n\nconst lightingEffect = new LightingEffect({\n  ambientLight,\n  directionalLight\n});\nconst tileChiyoda = 'https://s3-ap-northeast-1.amazonaws.com/3dimension.jp/13000_tokyo-egm96/13101_chiyoda-ku_notexture/tileset.json';\nexport default function App() {\n  _s();\n\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [lat, setLat] = useState(35.68836671417561);\n  const [lng, setLng] = useState(139.75643914212702);\n  const [zoom, setZoom] = useState(14);\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/in2twan/ckyzn794b000t14s81978v83n',\n      center: [lng, lat],\n      zoom: zoom\n    });\n  }); // DeckGL and mapbox will both draw into this WebGL context\n\n  const [glContext, setGLContext] = useState();\n  const deckRef = useRef(null);\n  const mapRef = useRef(null);\n  const onMapLoad = useCallback(() => {\n    const map = mapRef.current.getMap();\n    const deck = deckRef.current.deck; // You must initialize an empty deck.gl layer to prevent flashing\n\n    map.addLayer( // This id has to match the id of the deck.gl layer\n    new MapboxLayer({\n      id: \"tile-3d-layer\",\n      deck\n    }) // Optionally define id from Mapbox layer stack under which to add deck layer\n    // 'before-layer-id'\n    );\n  }, []);\n  const layers = [new Tile3DLayer({\n    id: 'tile-3d-layer',\n    pointSize: 2,\n    data: tileChiyoda,\n    loader: Tiles3DLoader,\n    onTilesetLoad: tileset => {\n      const {\n        cartographicCenter\n      } = tileset;\n      const [longitude, latitude] = cartographicCenter;\n      console.log(longitude, latitude);\n    },\n    onTileLoad: tileHeader => {\n      tileHeader.content.cartographicOrigin.z -= 40;\n    }\n  })];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainer,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Cmq9SmSzmjMC/CfDNboJ/NtOtn0=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/in2/Documents/GitHub/use-mapbox-gl-js-with-react/src/App.js"],"names":["React","useRef","useEffect","useState","mapboxgl","accessToken","render","StaticMap","DeckGL","Tile3DLayer","Tiles3DLoader","AmbientLight","PointLight","DirectionalLight","LightingEffect","ambientLight","color","intensity","directionalLight","direction","lightingEffect","tileChiyoda","App","mapContainer","map","lat","setLat","lng","setLng","zoom","setZoom","current","Map","container","style","center","glContext","setGLContext","deckRef","mapRef","onMapLoad","useCallback","getMap","deck","addLayer","MapboxLayer","id","layers","pointSize","data","loader","onTilesetLoad","tileset","cartographicCenter","longitude","latitude","console","log","onTileLoad","tileHeader","content","cartographicOrigin","z"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nmapboxgl.accessToken = 'pk.eyJ1IjoiaW4ydHdhbiIsImEiOiJja3l6bjJ0ZWIwY2d0Mm5yemZ3NWFmOWhjIn0._B39LsH99PmOk74938_tUg';\n\n\n\nimport {render} from 'react-dom';\nimport {StaticMap} from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport {Tile3DLayer} from '@deck.gl/geo-layers';\nimport {Tiles3DLoader} from '@loaders.gl/3d-tiles';\nimport {AmbientLight, PointLight, DirectionalLight, LightingEffect} from '@deck.gl/core';\n\n// create ambient light source\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 0.8\n});\n// create directional light source\nconst directionalLight = new DirectionalLight({\n  color: [255, 255, 255],\n  intensity: 1.0,\n  direction: [-3, -9, -1]\n});\n// create lighting effect with light sources\nconst lightingEffect = new LightingEffect({ambientLight, directionalLight});\n\nconst tileChiyoda = 'https://s3-ap-northeast-1.amazonaws.com/3dimension.jp/13000_tokyo-egm96/13101_chiyoda-ku_notexture/tileset.json';\n\n\n\nexport default function App() {\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [lat, setLat] = useState(35.68836671417561);\n  const [lng, setLng] = useState(139.75643914212702);\n  const [zoom, setZoom] = useState(14);\n\n  useEffect(() => {\n    if (map.current) return; // initialize map only once\n    map.current = new mapboxgl.Map({\n    container: mapContainer.current,\n    style: 'mapbox://styles/in2twan/ckyzn794b000t14s81978v83n',\n    center: [lng, lat],\n    zoom: zoom\n    });\n  });\n\n  // DeckGL and mapbox will both draw into this WebGL context\n  const [glContext, setGLContext] = useState();\n  const deckRef = useRef(null);\n  const mapRef = useRef(null);\n\n  const onMapLoad = useCallback(() => {\n    const map = mapRef.current.getMap();\n    const deck = deckRef.current.deck;\n\n    // You must initialize an empty deck.gl layer to prevent flashing\n    map.addLayer(\n      // This id has to match the id of the deck.gl layer\n      new MapboxLayer({ id: \"tile-3d-layer\", deck }),\n      // Optionally define id from Mapbox layer stack under which to add deck layer\n      // 'before-layer-id'\n    );\n  }, []);\n\n  const layers = [\n    new Tile3DLayer({\n      id: 'tile-3d-layer',\n      pointSize: 2,\n      data: tileChiyoda,\n      loader: Tiles3DLoader,\n      onTilesetLoad: (tileset) => {\n        const { cartographicCenter } = tileset;\n        const [longitude, latitude] = cartographicCenter;\n        console.log(longitude, latitude);\n      },\n      onTileLoad: (tileHeader) => {\n        tileHeader.content.cartographicOrigin.z -= 40;\n      }\n    })\n  ]\n  return (\n    <div>\n      <div ref={mapContainer} className=\"map-container\" />\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}